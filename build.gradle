plugins {
	id 'org.springframework.boot' version '2.7.11'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'ru.filit'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-logging'

	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:3.1.1'
	implementation 'io.github.openfeign:feign-java11:10.11'

	implementation 'org.apache.logging.log4j:log4j-to-slf4j:2.17.0'
	implementation 'org.apache.logging.log4j:log4j-api:2.17.0'

	implementation 'org.springframework.ws:spring-ws-support:3.1.0'


	implementation 'org.telegram:telegrambots:6.3.0'

	implementation 'org.springframework.cloud:spring-cloud-contract-wiremock:3.1.1'


	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
	finalizedBy(jacocoTestReport)
}

jacoco {
	toolVersion = "0.8.8"
}

jacocoTestReport {
	reports {
		xml.enabled true
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ["**/config/**", "**/exception/**", "**/model/**", "**/controller/**"])
		}))
	}
}

jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ["**/config/**", "**/exception/**", "**/model/**", "**/controller/**"])
		}))
	}

	violationRules {
		rule {
			limit {
				minimum = 0.9
			}
		}
	}
}

check.dependsOn jacocoTestCoverageVerification

tasks.named('test') {
	useJUnitPlatform()
}
